---
layout: post
title: Building communities
wip: true
---

h1. {{ page.title }}

p(meta). 01 Oct 2013

Building a community around your product is a powerful way to get the word out. Do it right and you'll have dedicated community members evangelizing your product in places you didn't even know exist. Do it wrong and your users will root against you (or worse, ignore you). Here is what we've learned about building a community by doing it for RethinkDB.

h2. Focus on your users

Your users don't see your product the way you do. Instead of product features they see use cases. Help them discover and understand your product through that lens. Go where they go. See what they see.

Is your products a piece of backend infrastructure for web applications? Then what are the popular web development tools? Find out. Integrate with them. How easy is it to use your product from Django? AngularJS? PHP? What other products and services do web developers use? Analytics platforms? Monitoring tools? Can your product integrate with those? Write componets to make it easy. Document them well. Add a special section for each tool to your site. Make users who are used to other tools feel comfortable.

Most products and services have their own section for integrations. Get your integration component listed there. Do they have user groups? Conferences? Go there and talk about how you are solving your users's problems. Don't make your product the focus of your talks -- give other people a reason to promote it.

Where do your users ask questions to get support? Don't make it a walled garden. Use a platform your target users already know. GitHub for issue tracking and product management. StackOverflow for technical questions. Twitter for short questions about your product. Let people find out about your product organically, through other tools, resources, and communities they already love. Don't count on your website for exponential growth.

h2. Be kind, humble, and direct

You will have to write. A lot. Product benefits, feature descriptions, technical documentation, release announcements, blog posts, social media comments, whitepapers, even e-mails to users.

Always be humble, concise, and direct. Don't try to sound impressive. State what the product does and doesn't do and let your users make their own judmenent. Short is better than long. Concrete is better than abstract. Avoid adverbs and adjectives -- use nouns and verbs. Review all copy with an eye for prefabricated phrases and marketing speak. Cut ruthlessly. Read ""Politics and the English Language"":https://www.mtholyoke.edu/acad/intrel/orwell46.htm and follow it religiously.

Always stay kind and polite. Treat everyone who took the time to use your product with reverence. Take all but the most crass questions seriously. Avoid talking about your competitors (but if you must, stick to facts).

Read what you wrote out loud. If you would feel awkward saying it to a friend or a colleague, rewrite it.

h2. Be accessible

Your product is new and likely has bugs. That's ok -- your users will cut you a lot of slack. They just have to know you appreciate their efforts, respect their time, and listen to their feedback.

Be accessible! Keep your development process open on GitHub. The feedback from your current and prospective users will be invaluable. Make it easy to ask questions. Be available on channels that are convenient for your users. For example, our users can talk to our team on GitHub, Twitter, IRC, Google Groups, StackOverflow, and e-mail. Tell people how to reach you on your website. Set a maximum time limit a question can go unanswered, and stick to it. Keep office hours. Let people drop by your office and meet the development team. Host developer events. Let people drop by, have some food, share tips, and talk about cool stuff they're building with your product.

Do go above and beyond, but learn how to politely say no. Your responsibility is to your community as a whole. Spending too much time with a single user can hurt others who might not be able to get answers as quickly as they need. Set expectations on the kind of support you will and will not do early.

h2. Empower others

PR. RethinkDB gems. Allow for integrations. Encourage talks.

h2. Give recognition

t-shirts, recognition.

h2. Impress consistently

Product tactics.

h2. Measure everything

Growth and engagement metrics tools.

h2. Kaizen/jiro dreams of sushi

foo