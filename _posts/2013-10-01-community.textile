---
layout: post
title: Building communities
wip: true
---

h1. {{ page.title }}

p(meta). 01 Oct 2013

Building a community around your product is a powerful way to get the word out. Do it right and you'll have dedicated community members evangelizing your product in ways you didn't think of. Do it wrong and your users will root against you (or worse, ignore you). Here is what we've learned about building a community at "RethinkDB":http://www.rethinkdb.com.

h2. Focus on your users

Your users don't see your product the way you do. Instead of product features they see use cases. Help them discover and understand your product through that lens. Go where they go. See what they see.

Is your products a piece of backend infrastructure for web applications? Then what are the popular web development tools? Find out. Integrate with them. How easy is it to use your product from Django? AngularJS? PHP? What other products and services do web developers use? Analytics platforms? Monitoring tools? Can your product integrate with those? Write componets to make it easy. Document them well. Add a special section for each tool to your site. Make users who are used to other tools feel comfortable.

Most products and services have their own section for integrations. Get your integration component listed there. Do they have user groups? Conferences? Go there and talk about how you are solving your users's problems. Don't make your product the focus of your talks -- give other people a reason to promote it.

Where do your users ask questions to get support? Don't make it a walled garden. Use a platform your target users already know. GitHub for issue tracking and product management. StackOverflow for technical questions. Twitter for short questions about your product. Let people find out about your product organically, through other tools, resources, and communities they already love. Don't count on your website for exponential growth.

h2. Be kind, humble, and direct

You will have to write a lot of content. Product benefits, feature descriptions, technical documentation, release announcements, blog posts, social media comments, whitepapers, even e-mails to users.

Always be humble, concise, and direct. Don't try to sound impressive. State what your product does and doesn't do and let your users make their own judmenent. Short is better than long. Concrete is better than abstract. Avoid adverbs and adjectives -- use nouns and verbs. Review all copy with an eye for prefabricated phrases and marketing speak. Cut ruthlessly. Read ""Politics and the English Language"":https://www.mtholyoke.edu/acad/intrel/orwell46.htm and follow it religiously.

Always stay kind and polite. Treat everyone who took the time to use your product with reverence. Take all but the most crass questions seriously. Avoid talking about your competitors (but if you must, stick to facts).

Read what you wrote out loud. If you would feel awkward saying it to a friend or a colleague, rewrite it.

h2. Be accessible

Your product is new and likely has bugs. That's ok -- your users will cut you a lot of slack. They just have to know you appreciate their efforts, respect their time, and listen to their feedback.

Be accessible! Keep your development process open on GitHub. The feedback from your current and prospective users will be invaluable. Make it easy to ask questions. Be available on channels that are convenient for your users. For example, our users can talk to our team on GitHub, Twitter, IRC, Google Groups, StackOverflow, and e-mail. Tell people how to reach you on your website. Set a maximum time limit a question can go unanswered, and stick to it. Keep office hours. Let people drop by your office and meet the development team. Host developer events. Let people drop by, have some food, share tips, and talk about cool stuff they're building with your product.

Do go above and beyond, but learn how to politely say no. Your responsibility is to your community as a whole. Spending too much time with a single user can hurt others who might not be able to get answers as quickly as they need. Set expectations on the kind of free support you will and will not do.

h2. Empower others

No matter how vast the resources at your disposal, they're still limited. There are only so many integration components you can build, blog posts you can write, and conferences you can attend. Give your users the ammunition to evangelize your product! They're using your software because they're excited about the way you're improving technology, and will be happy to tell others about what you're doing. They just need a little help.

If possible, make your product integration friendly. For example, at RethinkDB we're always looking for simpler ways "to get data in":https://github.com/rethinkdb/rethinkdb/issues/1383 from other systems, "get it back out":https://github.com/rethinkdb/rethinkdb/issues/997 in realtime, and "make integration with monitoring tools easier":https://github.com/rethinkdb/rethinkdb/issues/1391. If your product supports simple ways to integrate with others platforms, your users will write integration components for their tools of choice, and then happily promote these components to others. Make it easy for them!

Encourage your users to blog and do talks about how they're solving problems with your product. If someone is writing a post or doing a talk, make yourself accessible to answer their questions. Spending a little time to help them improve their content will make authors happy and will help get the word out. When your community members build software on top of your product, write a blog post, or do a talk, promote it to your users! Post a link on your site, tweet about it, blog about important projects.

If your product solves a real need, your users will promote it at their workplace. Give them the resources to do it successfully! Ask them what information their colleagues need to make an informed decision about your product. Do they need a whitepaper? A more business-oriented presenation? A press clipping to demonstrate that your product is the real deal? Make that information available to them.

Find creative ways to thank your users for taking the time to tell others about your product. Send them a t-shirt. Write a hand-written note. Even a quick e-mail can go a long way. Put genuine care and thought into helping your users's with their challenges, and they'll surprise you with their efforts to evangelize your product!

h2. Consistently improve the product

Product tactics.

h2. Measure impact

When the community around your product gets big, you can no longer rely on your intuition. You have to start measuring the impact you're making and use the instruments to guide your decisions. How many people are actively using your product? What's the attrition rate? How engaged are the existing users? How many support messages do you get daily? How many feature requests? Are you closing issues faster than they're accumilating? Which support channels are your users using most frequently? Build the tools to collect the data __before__ your community gets so big that your intuition breaks down. Your findings may surprise you.

You can only optimize a few things at a time. Collect the data, but don't go overboard and measure everything. Pick three to five metrics that are most important to you and focus on them. Metrics are a great way to measure how well you're doing, but a poor substitute for creativity. Use the instruments, but don't underestimate the human factor.

h2. Kaizening

foo