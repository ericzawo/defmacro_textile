---
layout: post
title: Software engineering, lessons learned
wip: true
---

h1. {{ page.title }}

p(meta). 04 Apr 2013

Over the course of building RethinkDB we learned many lessons. Some are rediscovered platitudes, and some are unique. In this post, I will maintain a list of lessons learned about the art and craft of software engineering.

h3. Fight complexity with all you've got

Linear increases in complexity cause superlinear increases in amount of work to be done. Be careless about complexity, and before you know it your development process will crawl to a halt.

That one engineer you hired to create a new component? Every time it has a bug, it will undoubtedly interact with other components and take up the time of other developers. That API you made slightly more complicated to solve an edge case for a potential (read: imaginary) future customer? Other people will have to spend time learning it, and will inevitably introduce bugs because they misunderstand it (which someone, of course, will have to spend time fixing).

Complexity is death. Fight, fight, fight complexity with everything you've got. If you can avoid adding new functionality, fight like hell to keep it out. If you lose that fight, see if you can get 80% of the functionality with 20% of the work. Usually, you can. Fight like hell to do it that way. If you lose _this_ fight, either you've hit the one case in a thousand where complexity is warranted, or, more likely, you should have fought harder.
